{
  "x-generator": "NSwag v13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))",
  "openapi": "3.0.0",
  "info": {
    "title": "Buyers",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://localhost:7041"
    }
  ],
  "paths": {
    "/paymentmethods/{payment_method_id}/attach": {
      "post": {
        "tags": [
          "Paymentmethods"
        ],
        "summary": "Attach Payment Method",
        "description": "Use this endpoint to Attach an existing payment method to a buyer.",
        "operationId": "BIOSBuyersEndpointsPaymentMethodsAttachPaymentMethodToBuyerEndpoint",
        "parameters": [
          {
            "name": "payment_method_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "x-name": "AttachPaymentMethodToBuyerRequest",
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttachPaymentMethodToBuyerRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "200": {
            "description": "The payment method you've just attached to buyer.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodContract"
                },
                "example": {
                  "id": null,
                  "type": null,
                  "billing_details": null,
                  "card": null,
                  "bank": null,
                  "metadata": {}
                }
              }
            }
          },
          "400": {
            "description": "The request did not pass validation checks.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                },
                "example": {
                  "message": "One or more error occurred",
                  "type": "bad_request",
                  "id": "ba12532f-26e1-4006-b5e2-f9176f71af1d",
                  "date": 1696519120297,
                  "errors": []
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                },
                "example": {
                  "message": "The requested resource cannot be found.",
                  "type": "not_found",
                  "id": "62bc7c95-e31b-494c-b6e5-416800590800",
                  "date": 1696519120299,
                  "errors": []
                }
              }
            }
          }
        }
      }
    },
    "/paymentmethods": {
      "post": {
        "tags": [
          "Paymentmethods"
        ],
        "summary": "Create Payment Method",
        "description": "Use this endpoint to create a new payment method.",
        "operationId": "BIOSBuyersEndpointsPaymentMethodsCreatePaymentMethodEndpoint",
        "requestBody": {
          "x-name": "CreatePaymentMethodRequest",
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePaymentMethodRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodContract"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "get": {
        "tags": [
          "Paymentmethods"
        ],
        "summary": "List Payment Methods",
        "description": "Use this endpoint to list all your payment methods.",
        "operationId": "BIOSBuyersEndpointsPaymentMethodsListPaymentMethodsEndpoint",
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "200": {
            "description": "A list of your payment methods.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentMethodContract"
                  }
                },
                "example": []
              }
            }
          }
        }
      }
    },
    "/paymentmethods/{payment_method_id}/detach": {
      "post": {
        "tags": [
          "Paymentmethods"
        ],
        "summary": "Detach Payment Method",
        "description": "Use this endpoint to detach an existing payment method from a buyer.",
        "operationId": "BIOSBuyersEndpointsPaymentMethodsDetachPaymentMethodFromBuyerEndpoint",
        "parameters": [
          {
            "name": "payment_method_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "200": {
            "description": "The payment method you've just detached from buyer.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodContract"
                },
                "example": {
                  "id": null,
                  "type": null,
                  "billing_details": null,
                  "card": null,
                  "bank": null,
                  "metadata": {}
                }
              }
            }
          },
          "400": {
            "description": "The request did not pass validation checks.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                },
                "example": {
                  "message": "One or more error occurred",
                  "type": "bad_request",
                  "id": "b76a30ca-2f5e-42c6-bc93-75dd485bd185",
                  "date": 1696519120307,
                  "errors": []
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                },
                "example": {
                  "message": "The requested resource cannot be found.",
                  "type": "not_found",
                  "id": "ffae8e4d-e86b-4bf8-8230-0f4190525486",
                  "date": 1696519120307,
                  "errors": []
                }
              }
            }
          }
        }
      }
    },
    "/paymentmethods/{payment_method_id}": {
      "get": {
        "tags": [
          "Paymentmethods"
        ],
        "summary": "Retrieve Payment Method",
        "description": "Use this endpoint to retrieve an existing payment method.",
        "operationId": "BIOSBuyersEndpointsPaymentMethodsRetrievePaymentMethodEndpoint",
        "parameters": [
          {
            "name": "payment_method_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "200": {
            "description": "The payment method with the ID you provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodContract"
                },
                "example": {
                  "id": null,
                  "type": null,
                  "billing_details": null,
                  "card": null,
                  "bank": null,
                  "metadata": {}
                }
              }
            }
          },
          "400": {
            "description": "The request did not pass validation checks.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                },
                "example": {
                  "message": "One or more error occurred",
                  "type": "bad_request",
                  "id": "0f622743-01c2-48af-a009-d9b2bc3c95d9",
                  "date": 1696519120307,
                  "errors": []
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                },
                "example": {
                  "message": "The requested resource cannot be found.",
                  "type": "not_found",
                  "id": "9099b8f4-ec7f-48de-94b7-296e70411eea",
                  "date": 1696519120307,
                  "errors": []
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Paymentmethods"
        ],
        "summary": "Update Payment Method",
        "description": "Use this endpoint to update an existing payment method.",
        "operationId": "BIOSBuyersEndpointsPaymentMethodsUpdatePaymentMethodEndpoint",
        "parameters": [
          {
            "name": "payment_method_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "x-name": "UpdatePaymentMethodRequest",
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePaymentMethodRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "200": {
            "description": "The payment method you have just updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodContract"
                },
                "example": {
                  "id": null,
                  "type": null,
                  "billing_details": null,
                  "card": null,
                  "bank": null,
                  "metadata": {}
                }
              }
            }
          },
          "400": {
            "description": "The request did not pass validation checks.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                },
                "example": {
                  "message": "One or more error occurred",
                  "type": "bad_request",
                  "id": "1936268c-f239-47a0-9f41-b7f5f8c963dd",
                  "date": 1696519120307,
                  "errors": []
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                },
                "example": {
                  "message": "The requested resource cannot be found.",
                  "type": "not_found",
                  "id": "cb57f690-7743-4419-92a7-46106fbd3f21",
                  "date": 1696519120307,
                  "errors": []
                }
              }
            }
          }
        }
      }
    },
    "/buyers": {
      "post": {
        "tags": [
          "Buyers"
        ],
        "summary": "Create Buyer",
        "description": "Use this endpoint to create a new buyer profile.",
        "operationId": "BIOSBuyersEndpointsBuyersCreateBuyerEndpoint",
        "requestBody": {
          "x-name": "CreateBuyerRequest",
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBuyerRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "201": {
            "description": "The buyer you have just created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BuyerContract"
                },
                "examples": {
                      "id": "49ff064b-e42c-4b55-b377-cf3e7cbed158",
                      "email": "buyeremail@example.it",
                      "name": "Jhon Doe",
                      "phone": "+12 34567890",
                      "address": {
                        "city": "East Artberg",
                        "line1": "Anderson Station",
                        "line2": "5170 Rowe Key Apt. 750",
                        "state": "Connecticut",
                        "country": "us",
                        "postal_code": "48862"
                      },
                      "metadata": {}
                }
              }
            }
          },
          "400": {
            "description": "The request did not pass validation checks.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                },
                "example": {
                  "message": "One or more error occurred",
                  "type": "bad_request",
                  "id": "ce050bfb-e0eb-4330-ae5b-18185bf19d02",
                  "date": 1696519120308,
                  "errors": []
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Buyers"
        ],
        "summary": "List Buyers",
        "description": "Use this endpoint to list all your buyers.",
        "operationId": "BIOSBuyersEndpointsBuyersListBuyersEndpoint",
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "200": {
            "description": "A list of your buyers.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BuyerContract"
                  }
                },
                "example": []
              }
            }
          }
        }
      }
    },
    "/buyers/{buyer_id}": {
      "delete": {
        "tags": [
          "Buyers"
        ],
        "summary": "Delete Buyer",
        "description": "Use this endpoint to delete an existing buyer profile.",
        "operationId": "BIOSBuyersEndpointsBuyersDeleteBuyerEndpoint",
        "parameters": [
          {
            "name": "buyer_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "204": {
            "description": "The buyer has been deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResponse"
                },
                "example": {}
              }
            }
          },
          "400": {
            "description": "The request did not pass validation checks.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                },
                "example": {
                  "message": "One or more error occurred",
                  "type": "bad_request",
                  "id": "a9469849-6eda-465f-966d-4dff2ac0db8e",
                  "date": 1696519120309,
                  "errors": []
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                },
                "example": {
                  "message": "The requested resource cannot be found.",
                  "type": "not_found",
                  "id": "5cacbd5c-249b-46c2-bb11-2b4cf76f3637",
                  "date": 1696519120309,
                  "errors": []
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Buyers"
        ],
        "summary": "Retrieve Buyer",
        "description": "Use this endpoint to retrieve an existing buyer profile.",
        "operationId": "BIOSBuyersEndpointsBuyersRetrieveBuyerEndpoint",
        "parameters": [
          {
            "name": "buyer_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "200": {
            "description": "The buyer with the ID you provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BuyerContract"
                },
                "example": {
                  "id": null,
                  "email": null,
                  "name": null,
                  "phone": null,
                  "address": null,
                  "metadata": {}
                }
              }
            }
          },
          "400": {
            "description": "The request did not pass validation checks.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                },
                "example": {
                  "message": "One or more error occurred",
                  "type": "bad_request",
                  "id": "f0de371c-b06e-4372-a0c9-8f152b1e9316",
                  "date": 1696519120309,
                  "errors": []
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                },
                "example": {
                  "message": "The requested resource cannot be found.",
                  "type": "not_found",
                  "id": "fb096a32-cfa1-4d9e-a4d6-e53ee3535d60",
                  "date": 1696519120309,
                  "errors": []
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Buyers"
        ],
        "summary": "Update Buyer",
        "description": "Use this endpoint to update an existing buyer profile.",
        "operationId": "BIOSBuyersEndpointsBuyersUpdateBuyerEndpoint",
        "parameters": [
          {
            "name": "buyer_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "x-name": "UpdateBuyerRequest",
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBuyerRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BuyerContract"
                },
                "example": {
                  "id": "dc408d22-3453-4619-8190-a71a6872b8ba",
                  "email": "buyeremail@example.it",
                  "name": "Jhon Doe",
                  "phone": "+12 34567890",
                  "address": {
                    "city": "East Artberg",
                    "line1": "Anderson Station",
                    "line2": "5170 Rowe Key Apt. 750",
                    "state": "Connecticut",
                    "country": "us",
                    "postal_code": "48862"
                  },
                  "metadata": {}
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "PaymentMethodContract": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the object.",
            "example": "1NxskpAKy7tT9lVJViam2Co0"
          },
          "type": {
            "type": "string",
            "description": "The type of the PaymentMethod.",
            "example": "card"
          },
          "billing_details": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/BillingDetailsContract"
              }
            ]
          },
          "card": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/CardContract"
              }
            ]
          },
          "bank": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/BankContract"
              }
            ]
          },
          "metadata": {
            "$ref": "#/components/schemas/MetadataContract"
          }
        }
      },
      "BillingDetailsContract": {
        "type": "object",
        "description": "Billing information associated with the PaymentMethod that may be used or required by particular types of payment methods.",
        "additionalProperties": false,
        "properties": {
          "address": {
            "description": "Billing address.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/AddressContract"
              }
            ]
          },
          "email": {
            "type": "string",
            "description": "Email address.",
            "nullable": true,
            "example": "email@example.it"
          },
          "name": {
            "type": "string",
            "description": "Full name.",
            "nullable": true,
            "example": "John Doe"
          },
          "phone": {
            "type": "string",
            "description": "Billing phone number(including extension).",
            "nullable": true,
            "example": "+12 34567890"
          }
        }
      },
      "AddressContract": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "city": {
            "type": "string"
          },
          "line1": {
            "type": "string"
          },
          "line2": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "postal_code": {
            "type": "string"
          }
        }
      },
      "CardContract": {
        "type": "object",
        "description": "If this is a card payment method, this hash contains the buyer’s card details.",
        "additionalProperties": false,
        "properties": {
          "brand": {
            "type": "string",
            "description": "Card brand.",
            "example": "visa"
          },
          "last_four": {
            "type": "string",
            "description": "The last four digits of the card.",
            "example": 1234
          },
          "exp_month": {
            "type": "integer",
            "description": "Two-digit number representing the card's expiration month.",
            "format": "int32",
            "example": 10
          },
          "exp_year": {
            "type": "integer",
            "description": "Four-digit number representing the card’s expiration year.",
            "format": "int32",
            "example": 2032
          },
          "country": {
            "type": "string",
            "description": "Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you’ve collected.",
            "example": "us"
          },
          "funding": {
            "type": "string",
            "description": "Card funding type.",
            "example": "credit"
          }
        }
      },
      "BankContract": {
        "type": "object",
        "description": "If this is a bank payment method, this hash contains details about the bank account.",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "description": "The buyer’s bank name.",
            "example": "alior_bank"
          },
          "country": {
            "type": "string",
            "description": "Two-letter ISO code representing the country the bank account is located in. ",
            "example": "it"
          }
        }
      },
      "MetadataContract": {
        "type": "object",
        "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
        "additionalProperties": {
          "type": "string"
        }
      },
      "ApiErrorResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "message": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "date": {
            "type": "integer",
            "format": "int64"
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "AttachPaymentMethodToBuyerRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "buyer_id"
        ],
        "properties": {
          "buyer_id": {
            "type": "string",
            "description": "The ID of the buyer to which to attach the PaymentMethod.",
            "minLength": 1
          }
        }
      },
      "CreatePaymentMethodRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "Possible values `alipay` `bancontact` `blik` `card` `eps` `fpx` `giropay` `ideal` `p24` `paypal` `sofort` `wechat_pay`",
            "minLength": 1,
            "example": "card"
          },
          "billing_details": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/BillingDetailsOptions"
              }
            ]
          },
          "card": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/CreateCardOptions"
              }
            ]
          },
          "bank": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/BankOptions"
              }
            ]
          },
          "metadata": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/MetadataOptions"
              }
            ]
          }
        }
      },
      "BillingDetailsOptions": {
        "type": "object",
        "description": "Billing information associated with the PaymentMethod that may be used or required by particular types of payment methods.",
        "additionalProperties": false,
        "properties": {
          "address": {
            "description": "Billing address.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/AddressOptions"
              }
            ]
          },
          "email": {
            "type": "string",
            "description": "Email address.",
            "example": "email@example.it"
          },
          "name": {
            "type": "string",
            "description": "Full name.",
            "example": "John Doe"
          },
          "phone": {
            "type": "string",
            "description": "Billing phone number(including extension).",
            "example": "+12 34567890"
          }
        }
      },
      "AddressOptions": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "city": {
            "type": "string"
          },
          "line1": {
            "type": "string"
          },
          "line2": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "postal_code": {
            "type": "string"
          }
        }
      },
      "CreateCardOptions": {
        "type": "object",
        "description": "If this is a card PaymentMethod, this hash contains the user’s card details. When providing a card number, you must meet the requirements for PCI compliance. We strongly recommend using BIOS.js instead of interacting with this API directly.",
        "additionalProperties": false,
        "required": [
          "number",
          "cvc",
          "expMonth",
          "expYear"
        ],
        "properties": {
          "number": {
            "type": "string",
            "description": "The card number, as a string without any separators.",
            "minLength": 1,
            "example": 1234123412341234
          },
          "cvc": {
            "type": "string",
            "description": "Card security code. It is highly recommended to always include this value.",
            "minLength": 1,
            "example": 123
          },
          "expMonth": {
            "type": "integer",
            "description": "Two-digit number representing the card's expiration month.",
            "format": "int32",
            "example": 10
          },
          "expYear": {
            "type": "integer",
            "description": "Four-digit number representing the card’s expiration year.",
            "format": "int32",
            "example": 2032
          }
        }
      },
      "BankOptions": {
        "type": "object",
        "description": "If this is a bank payment method, this hash contains details about the bank account.",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "description": "The buyer’s bank name. This parameter can be required with some payment method types.",
            "nullable": true,
            "example": "alior_bank"
          },
          "country": {
            "type": "string",
            "description": "Two-letter ISO code representing the country the bank account is located in. This parameter can be required with some payment method types.",
            "nullable": true,
            "example": "it"
          }
        }
      },
      "MetadataOptions": {
        "type": "object",
        "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to metadata.",
        "additionalProperties": {
          "type": "string",
          "nullable": true
        }
      },
      "UpdatePaymentMethodRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "billing_details": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/BillingDetailsOptions"
              }
            ]
          },
          "card": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/UpdateCardOptions"
              }
            ]
          },
          "bank": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/BankOptions"
              }
            ]
          },
          "metadata": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/MetadataOptions"
              }
            ]
          }
        }
      },
      "UpdateCardOptions": {
        "type": "object",
        "description": "If this is a card PaymentMethod, this hash contains the user’s card details.",
        "additionalProperties": false,
        "required": [
          "expMonth",
          "expYear"
        ],
        "properties": {
          "expMonth": {
            "type": "integer",
            "description": "Two-digit number representing the card's expiration month.",
            "format": "int32",
            "example": 10
          },
          "expYear": {
            "type": "integer",
            "description": "Four-digit number representing the card’s expiration year.",
            "format": "int32",
            "example": 2032
          }
        }
      },
      "BuyerContract": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the object.",
            "example": "1NxskpAKy7tT9lVJViam2Co0"
          },
          "email": {
            "type": "string",
            "description": "The buyer’s email address.",
            "nullable": true,
            "example": "buyer_email@example.it"
          },
          "name": {
            "type": "string",
            "description": "The buyer’s full name.",
            "nullable": true,
            "example": "John Doe"
          },
          "phone": {
            "type": "string",
            "description": "The buyer’s phone number.",
            "nullable": true,
            "example": "+12 34567890"
          },
          "address": {
            "description": "The buyer’s address.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/AddressContract"
              }
            ]
          },
          "metadata": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/MetadataContract"
              }
            ]
          }
        }
      },
      "CreateBuyerRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BuyerOptions"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "BuyerOptions": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "email": {
            "type": "string",
            "description": "The buyer’s email address.",
            "nullable": true,
            "example": "buyer_email@example.it"
          },
          "name": {
            "type": "string",
            "description": "The buyer’s full name.",
            "nullable": true,
            "example": "John Doe"
          },
          "phone": {
            "type": "string",
            "description": "The buyer’s phone number.",
            "nullable": true,
            "example": "+12 34567890"
          },
          "address": {
            "description": "The buyer’s address.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/AddressOptions"
              }
            ]
          },
          "metadata": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/MetadataOptions"
              }
            ]
          }
        }
      },
      "EmptyResponse": {
        "type": "object",
        "description": "a response dto that doesn't have any properties",
        "additionalProperties": false
      },
      "UpdateBuyerRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BuyerOptions"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      }
    }
  }
}