{
  "x-generator": "NSwag v13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))",
  "openapi": "3.0.0",
  "info": {
    "title": "Payins",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://localhost:7292"
    }
  ],
  "paths": {
    "/refunds": {
      "post": {
        "tags": [
          "Refunds"
        ],
        "summary": "Create Refund",
        "description": "Use this endpoint to create a new refund.",
        "operationId": "BIOSPayinsEndpointsRefundsCreateRefundEndpoint",
        "requestBody": {
          "x-name": "CreateRefundRequest",
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRefundRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "201": {
            "description": "The refund you have just created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundContract"
                },
                "example": {
                  "id": null,
                  "charge_id": null,
                  "amount": 0,
                  "currency": null,
                  "psp": null,
                  "state": null,
                  "reason": null,
                  "metadata": {}
                }
              }
            }
          },
          "400": {
            "description": "The request did not pass validation checks.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                },
                "example": {
                  "message": "One or more error occurred",
                  "type": "bad_request",
                  "id": "4eccb29c-9d4f-4650-a94d-4e26be7f4ef0",
                  "date": 1696582048530,
                  "errors": []
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Refunds"
        ],
        "summary": "List Refunds",
        "description": "Use this endpoint to list all your refunds.",
        "operationId": "BIOSPayinsEndpointsRefundsListRefundsEndpoint",
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "200": {
            "description": "A list of your refunds.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RefundContract"
                  }
                },
                "example": []
              }
            }
          }
        }
      }
    },
    "/refunds/{refund_id}": {
      "get": {
        "tags": [
          "Refunds"
        ],
        "summary": "Retrieve Refund",
        "description": "Use this endpoint to retrieve an existing refund.",
        "operationId": "BIOSPayinsEndpointsRefundsRetrieveRefundEndpoint",
        "parameters": [
          {
            "name": "refund_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "200": {
            "description": "The refund with the ID you provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundContract"
                },
                "example": {
                  "id": null,
                  "charge_id": null,
                  "amount": 0,
                  "currency": null,
                  "psp": null,
                  "state": null,
                  "reason": null,
                  "metadata": {}
                }
              }
            }
          },
          "400": {
            "description": "The request did not pass validation checks.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                },
                "example": {
                  "message": "One or more error occurred",
                  "type": "bad_request",
                  "id": "3f447d60-6a85-43c1-a397-90790d44da18",
                  "date": 1696582048537,
                  "errors": []
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                },
                "example": {
                  "message": "The requested resource cannot be found.",
                  "type": "not_found",
                  "id": "8d85817e-8c30-4eaa-aae5-84a4f2453212",
                  "date": 1696582048537,
                  "errors": []
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Refunds"
        ],
        "summary": "Update Refund",
        "description": "Use this endpoint to update an existing refund.",
        "operationId": "BIOSPayinsEndpointsDisputesUpdateRefundEndpoint",
        "parameters": [
          {
            "name": "refund_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "x-name": "UpdateRefundRequest",
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRefundRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "200": {
            "description": "The refund you have just updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundContract"
                },
                "example": {
                  "id": null,
                  "charge_id": null,
                  "amount": 0,
                  "currency": null,
                  "psp": null,
                  "state": null,
                  "reason": null,
                  "metadata": {}
                }
              }
            }
          },
          "400": {
            "description": "The request did not pass validation checks.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                },
                "example": {
                  "message": "One or more error occurred",
                  "type": "bad_request",
                  "id": "ed5c31cc-a4e6-48d9-ba18-10688fa7531a",
                  "date": 1696582048544,
                  "errors": []
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                },
                "example": {
                  "message": "The requested resource cannot be found.",
                  "type": "not_found",
                  "id": "d669e987-27c1-4abd-b38b-5eae062e146e",
                  "date": 1696582048544,
                  "errors": []
                }
              }
            }
          }
        }
      }
    },
    "/payins": {
      "post": {
        "tags": [
          "Payins"
        ],
        "summary": "Create Payin",
        "description": "Use this endpoint to create a new payin.",
        "operationId": "BIOSPayinsEndpointsPayinsCreatePayinEndpoint",
        "responses": {
          "401": {
            "description": "The request is not authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                },
                "example": {
                  "message": "Access to the API resource is not authorized due to an authentication failure.",
                  "type": "unauthorized_access",
                  "id": "58e9a4f5-586f-4e7e-a970-cc4227b06d5d",
                  "date": 1696582048538,
                  "errors": []
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "201": {
            "description": "The payin you have just created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePayinResponse"
                },
                "example": {
                  "id": "00000000-0000-0000-0000-000000000000"
                }
              }
            }
          },
          "400": {
            "description": "The request did not pass validation checks.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                },
                "example": {
                  "message": "One or more error occurred",
                  "type": "bad_request",
                  "id": "b6a94cbf-85fd-481c-b1fb-1968bca1dff1",
                  "date": 1696582048538,
                  "errors": []
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Payins"
        ],
        "summary": "List Payins",
        "description": "Use this endpoint to list all your payins.",
        "operationId": "BIOSPayinsEndpointsPayinsListPayinsEndpoint",
        "responses": {
          "401": {
            "description": "The request is not authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                },
                "example": {
                  "message": "Access to the API resource is not authorized due to an authentication failure.",
                  "type": "unauthorized_access",
                  "id": "0a98b495-4ad0-42df-90e9-a8b042aa2085",
                  "date": 1696582048541,
                  "errors": []
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "200": {
            "description": "A list of your payins.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListPayinsResponse"
                },
                "example": []
              }
            }
          },
          "400": {
            "description": "The request did not pass validation checks.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                },
                "example": {
                  "message": "One or more error occurred",
                  "type": "bad_request",
                  "id": "d9d20873-f363-4354-8b7f-9a7710006dae",
                  "date": 1696582048541,
                  "errors": []
                }
              }
            }
          }
        }
      }
    },
    "/payins/{payin_id}": {
      "delete": {
        "tags": [
          "Payins"
        ],
        "summary": "Delete Payin",
        "description": "Use this endpoint to delete an existing Payin.",
        "operationId": "BIOSPayinsEndpointsPayinsDeletePayinEndpoint",
        "parameters": [
          {
            "name": "payin_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The request is not authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                },
                "example": {
                  "message": "Access to the API resource is not authorized due to an authentication failure.",
                  "type": "unauthorized_access",
                  "id": "e81dcfe8-a433-4f34-800f-f682d5d3bcb1",
                  "date": 1696582048540,
                  "errors": []
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "204": {
            "description": "The payin has been deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResponse"
                },
                "example": {}
              }
            }
          },
          "400": {
            "description": "The request did not pass validation checks.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                },
                "example": {
                  "message": "One or more error occurred",
                  "type": "bad_request",
                  "id": "2eaa02f9-eb43-4dcc-8ac7-21f0d8999326",
                  "date": 1696582048540,
                  "errors": []
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                },
                "example": {
                  "message": "The requested resource cannot be found.",
                  "type": "not_found",
                  "id": "e272f881-98ad-4a55-af60-d19b52cbc3f8",
                  "date": 1696582048540,
                  "errors": []
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Payins"
        ],
        "summary": "Retrieve Payin",
        "description": "Use this endpoint to retrieve an existing payin.",
        "operationId": "BIOSPayinsEndpointsPayinsRetrievePayinEndpoint",
        "parameters": [
          {
            "name": "payin_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The request is not authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                },
                "example": {
                  "message": "Access to the API resource is not authorized due to an authentication failure.",
                  "type": "unauthorized_access",
                  "id": "ae3fcf46-ff8d-4d5a-a9e4-4478c0e72fc5",
                  "date": 1696582048542,
                  "errors": []
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "200": {
            "description": "The payin with the ID you provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RetrievePayinResponse"
                },
                "example": {
                  "id": "00000000-0000-0000-0000-000000000000"
                }
              }
            }
          },
          "400": {
            "description": "The request did not pass validation checks.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                },
                "example": {
                  "message": "One or more error occurred",
                  "type": "bad_request",
                  "id": "b4d669f0-d1b5-4cd9-b647-20bdb0dbbcad",
                  "date": 1696582048542,
                  "errors": []
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                },
                "example": {
                  "message": "The requested resource cannot be found.",
                  "type": "not_found",
                  "id": "c293b8a9-fb78-4e59-8d2b-b6cbbd2df8b2",
                  "date": 1696582048542,
                  "errors": []
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Payins"
        ],
        "summary": "Update Payin",
        "description": "Use this endpoint to update an existing payin.",
        "operationId": "BIOSPayinsEndpointsPayinsUpdatePayinEndpoint",
        "parameters": [
          {
            "name": "payin_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "401": {
            "description": "The request is not authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                },
                "example": {
                  "message": "Access to the API resource is not authorized due to an authentication failure.",
                  "type": "unauthorized_access",
                  "id": "586c14dd-3ca3-4614-907d-4547eb11eba5",
                  "date": 1696582048543,
                  "errors": []
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "200": {
            "description": "The payin you have just updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdatePayinResponse"
                },
                "example": {
                  "id": "00000000-0000-0000-0000-000000000000"
                }
              }
            }
          },
          "400": {
            "description": "The request did not pass validation checks.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                },
                "example": {
                  "message": "One or more error occurred",
                  "type": "bad_request",
                  "id": "ef4d6bd2-a9da-4238-a74b-6ccabcb7ff4a",
                  "date": 1696582048543,
                  "errors": []
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                },
                "example": {
                  "message": "The requested resource cannot be found.",
                  "type": "not_found",
                  "id": "12cffc18-917d-4a9c-8a4a-ea6a3e992da8",
                  "date": 1696582048543,
                  "errors": []
                }
              }
            }
          }
        }
      }
    },
    "/disputes/{dispute_id}/accept": {
      "post": {
        "tags": [
          "Disputes"
        ],
        "summary": "Accept Dispute",
        "description": "Use this endpoint to accept an open dispute.",
        "operationId": "BIOSPayinsEndpointsDisputesAcceptDisputeEndpoint",
        "parameters": [
          {
            "name": "dispute_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "200": {
            "description": "The dispute you have just accepted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DisputeContract"
                },
                "example": {
                  "id": null,
                  "seller_id": null,
                  "charge_id": null,
                  "amount": 0,
                  "currency": null,
                  "psp": null,
                  "state": null,
                  "reason": null,
                  "metadata": {}
                }
              }
            }
          },
          "400": {
            "description": "The request did not pass validation checks.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                },
                "example": {
                  "message": "One or more error occurred",
                  "type": "bad_request",
                  "id": "8fa3daf7-dc46-4ca3-a505-9ca3eb6a54fe",
                  "date": 1696582048544,
                  "errors": []
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                },
                "example": {
                  "message": "The requested resource cannot be found.",
                  "type": "not_found",
                  "id": "1a7a0829-0a5a-4dfb-a939-fc37968799d9",
                  "date": 1696582048544,
                  "errors": []
                }
              }
            }
          }
        }
      }
    },
    "/disputes/{dispute_id}/counter": {
      "post": {
        "tags": [
          "Disputes"
        ],
        "summary": "Counter Dispute",
        "description": "Use this endpoint to update evidence for an open dispute.",
        "operationId": "BIOSPayinsEndpointsDisputesCounterDisputeEndpoint",
        "parameters": [
          {
            "name": "dispute_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "x-name": "CounterDisputeRequest",
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CounterDisputeRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "200": {
            "description": "The dispute you have just updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DisputeContract"
                },
                "example": {
                  "id": null,
                  "seller_id": null,
                  "charge_id": null,
                  "amount": 0,
                  "currency": null,
                  "psp": null,
                  "state": null,
                  "reason": null,
                  "metadata": {}
                }
              }
            }
          },
          "400": {
            "description": "The request did not pass validation checks.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                },
                "example": {
                  "message": "One or more error occurred",
                  "type": "bad_request",
                  "id": "873d837e-0c04-4cbd-8442-443655f8154c",
                  "date": 1696582048545,
                  "errors": []
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                },
                "example": {
                  "message": "The requested resource cannot be found.",
                  "type": "not_found",
                  "id": "47fa3b57-1a80-40ab-be45-6ab0793de126",
                  "date": 1696582048545,
                  "errors": []
                }
              }
            }
          }
        }
      }
    },
    "/disputes": {
      "get": {
        "tags": [
          "Disputes"
        ],
        "summary": "List Disputes",
        "description": "Use this endpoint to list all your disputes.",
        "operationId": "BIOSPayinsEndpointsDisputesListDisputesEndpoint",
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "200": {
            "description": "A list of your disputes.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DisputeContract"
                  }
                },
                "example": []
              }
            }
          }
        }
      }
    },
    "/disputes/{dispute_id}": {
      "get": {
        "tags": [
          "Disputes"
        ],
        "summary": "Retrieve Dispute",
        "description": "Use this endpoint to retrieve an existing dispute.",
        "operationId": "BIOSPayinsEndpointsDisputesRetrieveDisputeEndpoint",
        "parameters": [
          {
            "name": "dispute_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "200": {
            "description": "The dispute with the ID you provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DisputeContract"
                },
                "example": {
                  "id": null,
                  "seller_id": null,
                  "charge_id": null,
                  "amount": 0,
                  "currency": null,
                  "psp": null,
                  "state": null,
                  "reason": null,
                  "metadata": {}
                }
              }
            }
          },
          "400": {
            "description": "The request did not pass validation checks.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                },
                "example": {
                  "message": "One or more error occurred",
                  "type": "bad_request",
                  "id": "584f04a4-67fe-4df9-a10f-d6c63247be8e",
                  "date": 1696582048546,
                  "errors": []
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                },
                "example": {
                  "message": "The requested resource cannot be found.",
                  "type": "not_found",
                  "id": "e6d425d8-be58-4a13-8f42-9a1e7913a93d",
                  "date": 1696582048546,
                  "errors": []
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Disputes"
        ],
        "summary": "Update Dispute",
        "description": "Use this endpoint to update an existing dispute.",
        "operationId": "BIOSPayinsEndpointsDisputesUpdateDisputeEndpoint",
        "parameters": [
          {
            "name": "dispute_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "x-name": "UpdateDisputeRequest",
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDisputeRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "200": {
            "description": "The dispute you have just updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DisputeContract"
                },
                "example": {
                  "id": null,
                  "seller_id": null,
                  "charge_id": null,
                  "amount": 0,
                  "currency": null,
                  "psp": null,
                  "state": null,
                  "reason": null,
                  "metadata": {}
                }
              }
            }
          },
          "400": {
            "description": "The request did not pass validation checks.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                },
                "example": {
                  "message": "One or more error occurred",
                  "type": "bad_request",
                  "id": "726ff65f-d940-410f-8c40-0d22aa392728",
                  "date": 1696582048546,
                  "errors": []
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                },
                "example": {
                  "message": "The requested resource cannot be found.",
                  "type": "not_found",
                  "id": "d1305e41-852e-40a2-8e61-f483bf34279d",
                  "date": 1696582048546,
                  "errors": []
                }
              }
            }
          }
        }
      }
    },
    "/charges": {
      "get": {
        "tags": [
          "Charges"
        ],
        "summary": "List Charges",
        "description": "Use this endpoint to list all your charges.",
        "operationId": "BIOSPayinsEndpointsChargesListChargesEndpoint",
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "200": {
            "description": "A list of your charges.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChargeContract"
                  }
                },
                "example": []
              }
            }
          },
          "400": {
            "description": "The request did not pass validation checks.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                },
                "example": {
                  "message": "One or more error occurred",
                  "type": "bad_request",
                  "id": "afae4e50-4131-4f91-bf1a-59ef7ee1cc3d",
                  "date": 1696582048547,
                  "errors": []
                }
              }
            }
          }
        }
      }
    },
    "/charges/{charge_id}/refund": {
      "post": {
        "tags": [
          "Charges"
        ],
        "summary": "Refund Charge",
        "description": "Use this endpoint to refund an existing charge.",
        "operationId": "BIOSPayinsEndpointsChargesRefundChargeEndpoint",
        "parameters": [
          {
            "name": "charge_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "200": {
            "description": "The charge you have just Refunded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargeContract"
                },
                "example": {
                  "id": null,
                  "seller_id": null,
                  "payin_id": null,
                  "payment_method_id": null,
                  "amount": 0,
                  "currency": null,
                  "psp": null,
                  "state": null,
                  "metadata": null
                }
              }
            }
          },
          "400": {
            "description": "The request did not pass validation checks.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                },
                "example": {
                  "message": "One or more error occurred",
                  "type": "bad_request",
                  "id": "3a8be5bc-125c-4579-b2eb-a456f5388ea1",
                  "date": 1696582048548,
                  "errors": []
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                },
                "example": {
                  "message": "The requested resource cannot be found.",
                  "type": "not_found",
                  "id": "3f1f9f22-39b1-4dba-912e-e4754cd24369",
                  "date": 1696582048548,
                  "errors": []
                }
              }
            }
          }
        }
      }
    },
    "/charges/{charge_id}": {
      "get": {
        "tags": [
          "Charges"
        ],
        "summary": "Retrieve Charge",
        "description": "Use this endpoint to retrieve an existing charge.",
        "operationId": "BIOSPayinsEndpointsChargesRetrieveChargeEndpoint",
        "parameters": [
          {
            "name": "charge_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "200": {
            "description": "The charge with the ID you provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargeContract"
                },
                "example": {
                  "id": null,
                  "seller_id": null,
                  "payin_id": null,
                  "payment_method_id": null,
                  "amount": 0,
                  "currency": null,
                  "psp": null,
                  "state": null,
                  "metadata": null
                }
              }
            }
          },
          "400": {
            "description": "The request did not pass validation checks.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                },
                "example": {
                  "message": "One or more error occurred",
                  "type": "bad_request",
                  "id": "c0d1b0a4-9ced-430b-982f-83c5e8a211e8",
                  "date": 1696582048548,
                  "errors": []
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                },
                "example": {
                  "message": "The requested resource cannot be found.",
                  "type": "not_found",
                  "id": "0c607126-8a07-4f98-bd83-711da13f6846",
                  "date": 1696582048548,
                  "errors": []
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Charges"
        ],
        "summary": "Update Charge",
        "description": "Use this endpoint to update an existing charge.",
        "operationId": "BIOSPayinsEndpointsChargesUpdateChargeEndpoint",
        "parameters": [
          {
            "name": "charge_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "x-name": "UpdateChargeRequest",
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateChargeRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "200": {
            "description": "The charge you have just updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargeContract"
                },
                "example": {
                  "id": null,
                  "seller_id": null,
                  "payin_id": null,
                  "payment_method_id": null,
                  "amount": 0,
                  "currency": null,
                  "psp": null,
                  "state": null,
                  "metadata": null
                }
              }
            }
          },
          "400": {
            "description": "The request did not pass validation checks.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                },
                "example": {
                  "message": "One or more error occurred",
                  "type": "bad_request",
                  "id": "247416c5-6ff6-4f15-85f5-8052b95547bb",
                  "date": 1696582048549,
                  "errors": []
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                },
                "example": {
                  "message": "The requested resource cannot be found.",
                  "type": "not_found",
                  "id": "6daf96b0-021d-471c-9916-88a3b493cd12",
                  "date": 1696582048549,
                  "errors": []
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "RefundContract": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the object."
          },
          "charge_id": {
            "type": "string",
            "description": "ID of the charge that’s refunded."
          },
          "amount": {
            "type": "integer",
            "description": "Amount, in cents.",
            "format": "int64"
          },
          "currency": {
            "type": "string",
            "description": "Three-letter ISO currency code, in lowercase. Must be a supported currency."
          },
          "psp": {
            "type": "string",
            "description": "The payment service provider where this dispute was raised."
          },
          "state": {
            "type": "string",
            "description": "The state of the refund."
          },
          "reason": {
            "type": "string",
            "description": "The reason why this refund was created."
          },
          "metadata": {
            "$ref": "#/components/schemas/MetadataContract"
          }
        }
      },
      "MetadataContract": {
        "type": "object",
        "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
        "additionalProperties": {
          "type": "string"
        }
      },
      "ApiErrorResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "message": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "date": {
            "type": "integer",
            "format": "int64"
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CreateRefundRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "charge_id",
          "reason"
        ],
        "properties": {
          "charge_id": {
            "type": "string",
            "description": "The charge identifier of the charge to refund.",
            "minLength": 1
          },
          "amount": {
            "type": "integer",
            "description": "A positive integer in cents representing how much of this charge to refund. Can refund only up to the remaining, unrefunded amount of the charge. If not provided the full refundable amount is used as default.",
            "format": "int64",
            "nullable": true
          },
          "reason": {
            "type": "string",
            "description": "The charge identifier of the charge to refund.",
            "minLength": 1
          },
          "metadata": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/MetadataOptions"
              }
            ]
          }
        }
      },
      "MetadataOptions": {
        "type": "object",
        "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to metadata.",
        "additionalProperties": {
          "type": "string",
          "nullable": true
        }
      },
      "CreatePayinResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PayinContract"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "PayinContract": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          }
        }
      },
      "CreatePayinRequest": {
        "type": "object",
        "additionalProperties": false
      },
      "EmptyResponse": {
        "type": "object",
        "description": "a response dto that doesn't have any properties",
        "additionalProperties": false
      },
      "ListPayinsResponse": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/PayinContract"
        }
      },
      "RetrievePayinResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PayinContract"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "UpdatePayinResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PayinContract"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "UpdatePayinRequest": {
        "type": "object",
        "additionalProperties": false
      },
      "UpdateRefundRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "metadata": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/MetadataOptions"
              }
            ]
          }
        }
      },
      "DisputeContract": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the object."
          },
          "seller_id": {
            "type": "string",
            "description": "The Seller ID that this dispute belongs to."
          },
          "charge_id": {
            "type": "string",
            "description": "The Charge ID that this dispute refers to."
          },
          "amount": {
            "type": "integer",
            "description": "Disputed amount. Usually the amount of the charge, but it can differ (usually because of currency fluctuation or because only part of the order is disputed).",
            "format": "int64"
          },
          "currency": {
            "type": "string",
            "description": "Three-letter ISO currency code, in lowercase. Must be a supported currency."
          },
          "psp": {
            "type": "string",
            "description": "The payment service provider where this dispute was raised."
          },
          "state": {
            "type": "string",
            "description": "The state of the dispute."
          },
          "reason": {
            "type": "string",
            "description": "The reason why this dispute was raised."
          },
          "metadata": {
            "$ref": "#/components/schemas/MetadataContract"
          }
        }
      },
      "CounterDisputeRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "access_activity_log": {
            "type": "string",
            "description": "Any server or activity logs showing proof that the buyer accessed or downloaded the purchased digital product. This information should include IP addresses, corresponding timestamps, and any detailed recorded activity.",
            "nullable": true
          },
          "billing_address": {
            "type": "string",
            "description": "The billing address provided by the buyer.",
            "nullable": true
          },
          "cancellation_policy": {
            "type": "string",
            "description": "(ID of a file upload) Your subscription cancellation policy, as shown to the buyer.",
            "nullable": true
          },
          "cancellation_policy_disclosure": {
            "type": "string",
            "description": "An explanation of how and when the buyer was shown your refund policy prior to purchase.",
            "nullable": true
          },
          "cancellation_rebuttal": {
            "type": "string",
            "description": "A justification for why the buyer’s subscription was not canceled.",
            "nullable": true
          },
          "buyer_communication": {
            "type": "string",
            "description": "(ID of a file upload) Any communication with the buyer that you feel is relevant to your case. example include emails proving that the buyer received the product or service, or demonstrating their use of or satisfaction with the product or service.",
            "nullable": true
          },
          "buyer_email_address": {
            "type": "string",
            "description": "The email address of the buyer.",
            "nullable": true
          },
          "buyer_name": {
            "type": "string",
            "description": "The name of the buyer.",
            "nullable": true
          },
          "buyer_purchase_ip": {
            "type": "string",
            "description": "The IP address that the buyer used when making the purchase.",
            "nullable": true
          },
          "buyer_signature": {
            "type": "string",
            "description": "(ID of a file upload) A relevant document or contract showing the buyer’s signature.",
            "nullable": true
          },
          "duplicate_charge_documentation": {
            "type": "string",
            "description": "(ID of a file upload) Documentation for the prior charge that can uniquely identify the charge, such as a receipt, shipping label, work order, etc. This document should be paired with a similar document from the disputed payment that proves the two payments are separate.",
            "nullable": true
          },
          "duplicate_charge_explanation": {
            "type": "string",
            "description": "An explanation of the difference between the disputed charge versus the prior charge that appears to be a duplicate.",
            "nullable": true
          },
          "duplicate_charge_id": {
            "type": "string",
            "description": "The BIOS ID for the prior charge which appears to be a duplicate of the disputed charge.",
            "nullable": true
          },
          "product_description": {
            "type": "string",
            "description": "A description of the product or service that was sold.",
            "nullable": true
          },
          "receipt": {
            "type": "string",
            "description": "(ID of a file upload) Any receipt or message sent to the buyer notifying them of the charge.",
            "nullable": true
          },
          "refund_policy": {
            "type": "string",
            "description": "(ID of a file upload) Your refund policy, as shown to the buyer.",
            "nullable": true
          },
          "refund_policy_disclosure": {
            "type": "string",
            "description": "Documentation demonstrating that the buyer was shown your refund policy prior to purchase.",
            "nullable": true
          },
          "refund_refusal_explanation": {
            "type": "string",
            "description": "A justification for why the buyer is not entitled to a refund.",
            "nullable": true
          },
          "service_date": {
            "type": "string",
            "description": "The date on which the buyer received or began receiving the purchased service, in a clear human-readable format.",
            "nullable": true
          },
          "service_documentation": {
            "type": "string",
            "description": "(ID of a file upload) Documentation showing proof that a service was provided to the buyer. This could include a copy of a signed contract, work order, or other form of written agreement.",
            "nullable": true
          },
          "shipping_address": {
            "type": "string",
            "description": "The address to which a physical product was shipped. You should try to include as complete address information as possible.",
            "nullable": true
          },
          "shipping_carrier": {
            "type": "string",
            "description": "The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc. If multiple carriers were used for this purchase, please separate them with commas.",
            "nullable": true
          },
          "shipping_date": {
            "type": "string",
            "description": "The date on which a physical product began its route to the shipping address, in a clear human-readable format.",
            "nullable": true
          },
          "shipping_documentation": {
            "type": "string",
            "description": "(ID of a file upload) Documentation showing proof that a product was shipped to the buyer at the same address the buyer provided to you. This could include a copy of the shipment receipt, shipping label, etc. It should show the buyer’s full shipping address, if possible.",
            "nullable": true
          },
          "shipping_tracking_number": {
            "type": "string",
            "description": "The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas.",
            "nullable": true
          },
          "uncategorized_file": {
            "type": "string",
            "description": "(ID of a file upload) Any additional evidence or statements.",
            "nullable": true
          },
          "uncategorized_text": {
            "type": "string",
            "description": "Any additional evidence or statements.",
            "nullable": true
          }
        }
      },
      "UpdateDisputeRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "metadata": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/MetadataOptions"
              }
            ]
          }
        }
      },
      "ChargeContract": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the object."
          },
          "seller_id": {
            "type": "string",
            "description": "The Seller ID that these funds are intended for."
          },
          "payin_id": {
            "type": "string",
            "description": "ID of the PaymentIntent associated with this charge."
          },
          "payment_method_id": {
            "type": "string",
            "description": "ID of the payment method used in this charge."
          },
          "amount": {
            "type": "integer",
            "description": "Amount intended to be collected by this payin. A positive integer representing how much to charge in the smallest currency unit (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or equivalent in charge currency. The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).",
            "format": "int64"
          },
          "currency": {
            "type": "string",
            "description": "Three-letter ISO currency code, in lowercase. Must be a supported currency."
          },
          "psp": {
            "type": "string",
            "description": "The payment service provider where this charge was attempted."
          },
          "state": {
            "type": "string",
            "description": "The state of the charge."
          },
          "metadata": {
            "$ref": "#/components/schemas/MetadataContract"
          }
        }
      },
      "UpdateChargeRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "metadata": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/MetadataOptions"
              }
            ]
          }
        }
      }
    }
  }
}