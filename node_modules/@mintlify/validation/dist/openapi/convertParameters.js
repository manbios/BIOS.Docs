import { InvalidSchemaError } from './convertOpenApi.js';
import { convertSchema, copyKeyIfDefined } from './convertSchema.js';
export const convertParameters = ({ path, method, pathParameters, operationParameters, }) => {
    const parameterSections = {
        path: {},
        query: {},
        header: {},
        cookie: {},
    };
    pathParameters === null || pathParameters === void 0 ? void 0 : pathParameters.forEach((parameterObject, i) => {
        addParameter({
            path: [...path, 'parameters', i.toString()],
            parameter: parameterObject,
            parameterSections,
        });
    });
    operationParameters === null || operationParameters === void 0 ? void 0 : operationParameters.forEach((parameterObject, i) => {
        addParameter({
            path: [...path, method, 'parameters', i.toString()],
            parameter: parameterObject,
            parameterSections,
        });
    });
    return parameterSections;
};
const addParameter = ({ path, parameter, parameterSections }) => {
    if (!['path', 'header', 'query', 'cookie'].includes(parameter.in)) {
        throw new InvalidSchemaError(path, `invalid parameter location: '${parameter.in}'`);
    }
    const location = parameter.in;
    if (location === 'path') {
        const newParameter = {
            required: true,
            schema: convertSchema([...path, 'schema'], parameter.schema, true),
        };
        copyKeyIfDefined('description', parameter, newParameter);
        copyKeyIfDefined('deprecated', parameter, newParameter);
        parameterSections.path[parameter.name] = newParameter;
    }
    else {
        const newParameter = {
            schema: convertSchema([...path, 'schema'], parameter.schema, true),
        };
        copyKeyIfDefined('description', parameter, newParameter);
        copyKeyIfDefined('deprecated', parameter, newParameter);
        copyKeyIfDefined('required', parameter, newParameter);
        parameterSections[location][parameter.name] = newParameter;
    }
};
