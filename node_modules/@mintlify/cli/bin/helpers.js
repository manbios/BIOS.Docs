var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { getConfigPath } from '@mintlify/prebuild';
import detect from 'detect-port';
import Ora from 'ora';
import { createInterface } from 'readline';
import { CMD_EXEC_PATH } from './constants.js';
const confirm = (question) => __awaiter(void 0, void 0, void 0, function* () {
    return new Promise((resolve) => {
        const cmdInterface = createInterface({
            input: process.stdin,
            output: process.stdout,
        });
        cmdInterface.question(question, (response) => {
            cmdInterface.close();
            resolve(response.toLowerCase() === 'y');
        });
    });
});
export const checkPortRecursive = (argv) => __awaiter(void 0, void 0, void 0, function* () {
    const port = (argv.port || 3000);
    const _port = yield detect(port);
    if (port == _port) {
        return port;
    }
    const confirmed = yield confirm(`Port ${port} is already in use. Use port ${_port} instead? [Y/n]\n`);
    if (confirmed) {
        return yield checkPortRecursive(Object.assign(Object.assign({}, argv), { port: _port }));
    }
    return undefined;
});
export const buildLogger = (startText = '') => {
    const logger = Ora().start(startText);
    return logger;
};
export const checkForMintJson = () => __awaiter(void 0, void 0, void 0, function* () {
    if (yield getConfigPath(CMD_EXEC_PATH))
        return;
    console.error('Must be run in a directory where a mint.json file exists.');
    process.exit(1);
});
