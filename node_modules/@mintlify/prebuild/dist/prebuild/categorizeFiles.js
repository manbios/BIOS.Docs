import * as path from 'path';
import { getFileList } from '../fs/index.js';
import { getFileExtension, openApiCheck } from '../utils.js';
export const categorizeFiles = async (contentDirectoryPath) => {
    const allFilesInCmdExecutionPath = getFileList(contentDirectoryPath);
    const contentFilenames = [];
    const staticFilenames = [];
    const openApiFiles = [];
    const snippets = [];
    for await (const filename of allFilesInCmdExecutionPath) {
        const extension = getFileExtension(filename);
        let isOpenApi = false;
        switch (extension) {
            case 'mdx':
            case 'md':
                if (filename.startsWith('/_snippets')) {
                    snippets.push(filename);
                    break;
                }
                contentFilenames.push(filename);
                break;
            case 'json':
            case 'yaml':
            case 'yml':
                const openApiInfo = await openApiCheck(path.join(contentDirectoryPath, filename));
                isOpenApi = openApiInfo.isOpenApi;
                if (!isOpenApi || !openApiInfo.spec) {
                    break;
                }
                const fileName = path.parse(filename).base;
                openApiFiles.push({
                    filename: fileName.substring(0, fileName.lastIndexOf('.')),
                    spec: openApiInfo.spec,
                });
                break;
            default:
                staticFilenames.push(filename);
        }
    }
    return { contentFilenames, staticFilenames, openApiFiles, snippets };
};
const excludedMdFiles = ['readme', 'license', 'contributing', 'contribute'];
const supportedStaticFileExtensions = [
    '.jpeg',
    '.jpg',
    '.jfif',
    '.pjpeg',
    '.pjp',
    '.png',
    '.svg',
    '.svgz',
    '.ico',
    '.webp',
    '.gif',
    '.apng',
    '.avif',
    '.bmp',
    '.mp4',
];
export const getCategory = (filePath) => {
    filePath = filePath.toLowerCase();
    const parsed = path.parse(filePath);
    if (parsed.base === 'mint.json') {
        return 'mintConfig';
    }
    const fileName = parsed.name;
    const extension = parsed.ext;
    if (filePath.startsWith('_snippets') && (extension === '.mdx' || extension === '.md')) {
        return 'snippet';
    }
    else if (extension === '.mdx') {
        return 'page';
    }
    else if (extension === '.md') {
        // Exclude common markdown files people don't want on their docs website
        if (excludedMdFiles.includes(fileName)) {
            throw new Error('Excluded Md File');
        }
        return 'page';
    }
    else if (extension === '.yaml' || extension === '.yml') {
        return 'potentialYamlOpenApiSpec';
    }
    else if (extension === '.json') {
        return 'potentialJsonOpenApiSpec';
    }
    else if (supportedStaticFileExtensions.includes(extension)) {
        return 'staticFile';
    }
    throw new Error('Unsupported File Type, No change enacted');
};
