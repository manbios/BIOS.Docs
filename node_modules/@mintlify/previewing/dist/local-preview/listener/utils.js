var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import SwaggerParser from '@apidevtools/swagger-parser';
import { promises as _promises } from 'fs';
const { stat } = _promises;
export const getFileExtension = (filename) => {
    return filename.substring(filename.lastIndexOf('.') + 1, filename.length) || filename;
};
export const openApiCheck = (path) => __awaiter(void 0, void 0, void 0, function* () {
    let spec;
    let isOpenApi = false;
    try {
        spec = yield SwaggerParser.validate(path);
        isOpenApi = true;
    }
    catch (_a) {
        // not valid openApi
    }
    return { spec, isOpenApi };
});
export const filterOutNullInGroup = (group) => {
    const newPages = filterOutNullInPages(group.pages);
    const newGroup = Object.assign(Object.assign({}, group), { pages: newPages });
    return newGroup;
};
const filterOutNullInPages = (pages) => {
    const newPages = [];
    pages.forEach((page) => {
        if (page == null) {
            return;
        }
        if (page.hasOwnProperty('pages')) {
            const group = page;
            const newGroup = filterOutNullInGroup(group);
            newPages.push(newGroup);
        }
        else {
            newPages.push(page);
        }
    });
    return newPages;
};
export const isFileSizeValid = (path, maxFileSizeInMb) => __awaiter(void 0, void 0, void 0, function* () {
    const maxFileSizeBytes = maxFileSizeInMb * 1000000;
    const stats = yield stat(path);
    return stats.size <= maxFileSizeBytes;
});
export function isError(obj) {
    return Object.prototype.toString.call(obj) === '[object Error]';
}
